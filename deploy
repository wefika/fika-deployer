#!/usr/bin/env ruby

require "rubygems"
require "json"
require 'uri'
require 'net/http'
require 'net/https'

def die_with msg
  puts msg; exit
end

def hc_notify config, msg
  hc_room_id, hc_api_key = config["hc_room_id"], config["hc_api_key"]

  args = {
    :auth_token => hc_api_key,
    :format => "format",
    :room_id=> hc_room_id,
    :from => "fika-deployer",
    :color => "green",
    :message => msg
  }

  uri = URI.parse("https://api.hipchat.com/v1/rooms/message")
  uri.query = URI.encode_www_form(args)

  https = Net::HTTP.new(uri.host, uri.port)
  https.use_ssl = true
  https.verify_mode = OpenSSL::SSL::VERIFY_NONE

  request = Net::HTTP::Get.new(uri.request_uri)
  response = https.request(request)

  JSON.parse(response.body)
end

# Make sure that packages are valid
package = ARGV.first
die_with("Only *.apk or *.ipa are allowed package.") unless package =~ /apk|ipa/

# Determine OS
os = {'apk' => "android", 'ipa' => "ios"}[Regexp.last_match.to_s]
die_with("Only android or ios packages accepted") if os.nil?

# Determine version
version = ARGV[1].match(/\d+\.\d+\.\d+/).to_a.first rescue nil
die_with("Version must be in format number.number.number") if version.nil?

# Load configuration
file_path = "#{ENV['HOME']}/.fika_developer"
die_with("Missing .fika_developer configuration.") unless File.exists?(file_path)

# Parse configuration
file = File.new file_path,"r"
raw_string = ""
file.each { |line| raw_string += line; }
file.close
config = JSON.load(raw_string) rescue nil
die_with("JSON parsing failed") if config.nil?

# Release notes
release_notes = ARGV[2] rescue nil
die_with("Last parameter must be release note. Fill it in!") if release_notes.nil?

puts hc_notify config, "New version for #{os} was deployed. Version: #{version}"
exit


puts "Done."



