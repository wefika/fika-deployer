#!/usr/bin/env ruby

require "rubygems"
require "json"
require 'uri'
require 'net/http'
require 'net/https'

def die_with msg
  puts msg; exit
end

def hc_notify config, msg
  hc_room_id, hc_api_key = config["hc_room_id"], config["hc_api_key"]

  args = {
    :auth_token => hc_api_key,
    :format => "format",
    :room_id=> hc_room_id,
    :from => "fika-deployer",
    :color => "green",
    :message => msg
  }

  uri = URI.parse("https://api.hipchat.com/v1/rooms/message")
  uri.query = URI.encode_www_form(args)

  https = Net::HTTP.new(uri.host, uri.port)
  https.use_ssl = true
  https.verify_mode = OpenSSL::SSL::VERIFY_NONE

  request = Net::HTTP::Get.new(uri.request_uri)
  response = https.request(request)

  JSON.parse(response.body)
end

def hockey_upload config, package, os, details={}
  hockeyapp_token = config["hockeyapp_token"]
  sha = last_sha.strip

  request = %x( curl -s -F "status=2" \
    -F "notify=1" \
    -F "notes=#{details['release_notes'].strip}" \
    -F "notes_type=0" \
    -F "release_type=0" \
    -F "tags=#{details['tags'].strip}" \
    -F "commit_sha=#{sha}" \
    -F "ipa=@#{package}" \
    -H "X-HockeyAppToken: #{hockeyapp_token}" \
    https://rink.hockeyapp.net/api/2/apps/upload
  ).strip

  if not(request.nil?)
    return JSON.parse(request) rescue nil
  end

  nil
end

def last_sha
  %x( git rev-list --max-count=1 HEAD ).strip
end

# Make sure that packages are valid
package = ARGV.first
die_with("Only *.apk or *.ipa are allowed package.") unless package =~ /apk|ipa/

# Determine OS
os = {'apk' => "android", 'ipa' => "ios"}[Regexp.last_match.to_s]
die_with("Only android or ios packages accepted") if os.nil?

# Determine version
version = ARGV[1].match(/\d+\.\d+\.\d+/).to_a.first rescue nil
die_with("Version must be in format number.number.number") if version.nil?

# Load configuration
file_path = "#{ENV['HOME']}/.fika_developer"
die_with("Missing .fika_developer configuration.") unless File.exists?(file_path)

file = File.new file_path,"r"
raw_string = ""
file.each { |line| raw_string += line; }
file.close
config = JSON.load(raw_string) rescue nil
die_with("JSON parsing failed") if config.nil?

release_notes = ARGV[2] rescue nil
die_with("3rd parameter must be release note!") if release_notes.nil?

tags = ARGV[3] rescue nil
die_with("4th parameter must have tags!") if tags.nil?

upload = hockey_upload config, package, os, { "tags" => tags, "release_notes" => release_notes }
die_with("Upload to HockeyApp failed!") if upload.nil?

config_url = upload["config_url"]

icon = {
  "android"=>"https://dujrsrsgsd3nh.cloudfront.net/img/emoticons/android.png",
  "ios"=>"https://dujrsrsgsd3nh.cloudfront.net/img/emoticons/beer.png"}[os.to_s]

hc_notify config, "New version for <img src=\"#{icon}\"/> was deployed. Version: #{version} Tags: #{tags}
\n URL: <a href=\"#{config_url}\">#{config_url}</a>"

puts "Done."



